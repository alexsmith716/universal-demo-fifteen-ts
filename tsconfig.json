{
  "compilerOptions": {
    "allowJs": false,
    "allowSyntheticDefaultImports": true,
    "declaration": false,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react",
    "lib": ["esnext", "dom"],
    "outDir": "./build/",
    "moduleResolution": "node",
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "removeComments": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "suppressImplicitAnyIndexErrors": true
  },
  "include": [
    "./src/**/*.tsx"
  ],
  "exclude": [
    "node_modules",
    "build"
  ]
}

// @babel/preset-typescript : Transform TypeScript into ES.next
// https://babeljs.io/docs/en/next/babel-preset-typescript.html
// https://babeljs.io/docs/en/next/babel-plugin-transform-typescript.html

// '@babel/preset-typescript' includes the plugins of '@babel/plugin-transform-typescript'
 
// ==========================================================================================
// ========================= @babel/plugin-transform-typescript =============================
// ==========================================================================================

// '@babel/plugin-transform-typescript' adds support for the syntax used by the TypeScript programming language. 
// However, this plugin does not add the ability to type-check the JavaScript passed to it. 
// For that, you will need to install and set up TypeScript.

// '@babel/plugin-transform-typescript' >>>>>> TypeScript Compiler Options:

// 'The official TypeScript compiler' has many options for configuring how it compiles and type checks. 
// 'While many don't apply', 'some' behaviors might be useful 
//   and 'their equivalents in Babel' can be enabled by 'some' configuration options or plugins.

//  --module, -m: 
//      If you are using a bundler (Webpack or Rollup), this option is set automatically. 
//      If you are using @babel/preset-env, you can use the modules option; 
//      otherwise you can load the specific plugin.

//  --target: 
//      Babel doesn't support targeting a specific version of the language, 
//      but you can choose which engines you want to target using @babel/preset-env. 
//      If you prefer, you can enable individual plugins for every ECMAScript feature.

// ==========================================================================================
// ==========================================================================================
// ==========================================================================================

// https://github.com/TypeStrong/fork-ts-checker-webpack-plugin
// https://babeljs.io/docs/en/babel-preset-env#modules

// Node.js uses the commonjs module system, so the value for the module setting is commonjs
// the target version of JavaScript is es6, which is compatible with modern versions of Node.js

// https://blog.angularindepth.com/configuring-typescript-compiler-a84ed8f87e3
// TypeScript is a superset of ES6, so you're essentially writing TS code using ES6 version of JavaScript.
// However, when compiled, the resulting JS code can be in ES5 or earlier.
// all browsers support most of ES6 spec, so ES6 may be a good option with some shims
// target option: define which version of JS the compiler should transpile into
// By default, TS compiler outputs transpiled files to the same directory where the original TS files is found.

// lib =============================:
// library files to be included in compilation
// Note: If --lib is not specified a default list of libraries are injected
// The default libraries injected are:
// ► For --target ES5: DOM,ES5,ScriptHost
// ► For --target ES6: DOM,ES6,DOM.Iterable,ScriptHost
// ----------------
// 'libs' make a promise to the compiler, "please don't complain about these APIs, I promise the browser will support them."
// E.g. If you add es6 and don't include polyfills, old browsers will choke
// ----------------
// including "es2015.promise" doesn't include a polyfill into compiled code
// you are notifying the compiler that code is using promises and it should be okay with that
// If adding promise polyfills, import the polyfill in code or use babel (babel-preset-env) as a post-step (or next loader in webpack)
// ----------------
// By specifying 'lib' you simply tell TS compiler to not throw error 
//  if classes or API's from those libraries are encountered during transpilation process
// This option has no effect on the output since a library is simply ad.ts file with lib API interfaces

// module =============================:
// which module system to expect
// target === "ES3" or "ES5" ? "CommonJS" : "ES6"
// Specify module code generation: "None", "CommonJS", "AMD", "System", "UMD", "ES6", "ES2015" or "ESNext"
// "ES6" and "ES2015" values may be used when targeting "ES5" or lower

// target =============================:
// ECMAScript version to compile to
// specify ECMAScript target version
// target those version features for the runtime
// using target ES6 instructs compiler not to transform ES6-specific features
// ► "ES3" (default)
// ► "ES5"
// ► "ES6"/"ES2015"
// ► "ES2016"
// ► "ES2017"
// ► "ES2018"
// ► "ES2019"
// ► "ES2020"
// ► "ESNext"

// {
//   "compilerOptions": {
// 
//     /* Basic Options */                       
//     "target": "es5",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */
//     "module": "commonjs",                  /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'. */
//     "lib": [],                             /* Specify library files to be included in the compilation:  */
//     "allowJs": true,                       /* Allow JavaScript files to be compiled. */
//     "checkJs": true,                       /* Report errors in .js files. */
//     "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
//     "declaration": true,                   /* Generates corresponding '.d.ts' file. */
//     "sourceMap": true,                     /* Generates corresponding '.map' file. */
//     "outFile": "./",                       /* Concatenate and emit output to single file. */
//     "outDir": "./",                        /* Redirect output structure to the directory. */
//     "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
//     "removeComments": true,                /* Do not emit comments to output. */
//     "noEmit": true,                        /* Do not emit outputs. */
//     "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
//     "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
//     "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
// 
//     /* Strict Type-Checking Options */        
//     "strict": true,                        /* Enable all strict type-checking options. */
//     "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
//     "strictNullChecks": true,              /* Enable strict null checks. */
//     "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
//     "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */
// 
//     /* Additional Checks */                   
//     "noUnusedLocals": true,                /* Report errors on unused locals. */
//     "noUnusedParameters": true,            /* Report errors on unused parameters. */
//     "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
//     "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
// 
//     /* Module Resolution Options */           
//     "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
//     "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
//     "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
//     "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
//     "typeRoots": [],                       /* List of folders to include type definitions from. */
//     "types": [],                           /* Type declaration files to be included in compilation. */
//     "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
// 
//     /* Source Map Options */                  
//     "sourceRoot": "./",                    /* Specify the location where debugger should locate TypeScript files instead of source locations. */
//     "mapRoot": "./",                       /* Specify the location where debugger should locate map files instead of generated locations. */
//     "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
//     "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
// 
//     /* Experimental Options */                
//     "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
//     "emitDecoratorMetadata": true          /* Enables experimental support for emitting type metadata for decorators. */
//   }
// }
